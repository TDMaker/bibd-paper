#include <stdio.h>
int report[v] = {0};
    int suspect_cp[v] = {0};
    int is_cp_unique;
    int S[v][v];

    for (int row_s = 0; row_s < v; row_s++) {
        for (int col_s = 0; col_s < v; col_s++) {
            S[row_s][col_s] = 0;
        }
    }

    for (int i = 0; i < v; i++) {
        for (int j = 0; j < k + 1; j++) {
            is_cp_unique = 1;
            for (int l = 1; l < k + 1; l++) {
                if (mpz_cmp(CP[D[i][j]], CP[D[i][(j + l) % (k + 1)]]) == 0) {
                    printf(const char *, ...)
                    is_cp_unique = 0;
                    break;
                }
            }
            if (is_cp_unique == 1) {
                printf("In CS%2d's comparing, there's no other CP(s) same with CP[%d]\n", i, D[i][j]);

                for (int rrr = 0; rrr < v; rrr++) {
                    S[F[D[i][j]][rrr]][rrr]++;
                }

                suspect_cp[D[i][j]]++;
                for (int p = 0; p < k + 1; p++) {
                    // printf("%d ", D[D[i][j]][p]);
                    report[D[D[i][j]][p]]++;
                }
                // printf("\n");
                break;
            }
        }
    }

    for (int iii = 0; iii < v; iii++) {
        printf("S[%2d]:{", iii);
        for (int jjj = 0; jjj < v; jjj++) {
            printf("%2d,", S[iii][jjj]);
        }
        printf("\b}\n");
    }

    puts("suspect cp");
    for (int i = 0; i < v; i++) {
        printf("%d ", suspect_cp[i]);
    }
    puts("after S");
    for (int row_s = 0; row_s < v; row_s++) {
        for (int col_s = 0; col_s < v; col_s++) {
            if (S[row_s][col_s] != 0) {
                printf("S[%d][%d] is %d\n", row_s, col_s, S[row_s][col_s]);
                for (int row_f = 0; row_f < v; row_f++) {
                    if (suspect_cp[row_f] == 0 && F[row_f][col_s] == row_s) {
                        S[row_s][col_s] = 0;
                        printf("F[%d][%d] is %d\n", row_f, col_s, F[row_f][col_s]);
                        printf("S[%d][%d] set to 0\n", row_s, col_s);
                    }
                }
            }
        }
    }
    printf("\n");
    for (int iii = 0; iii < v; iii++) {
        printf("S[%2d]:{", iii);
        for (int jjj = 0; jjj < v; jjj++) {
            printf("%2d,", S[iii][jjj]);
        }
        printf("\b}\n");
    }

    int csp = find_max(report, k * k + k + 1);
    // printf("CSP%d is the candidate.\n", csp);
    int t_components[k + 1];
    memcpy(t_components, E[csp], (k + 1) * sizeof(int));
    for (int i = 0; i < v; i++) {
        for (int j = 0; j < v; j++) {
            if (F[i][j] == csp && suspect_cp[i] == 0) {
                remove_ele(j, t_components, k + 1);
            }
        }
    }
    for (int i = 0; i < k + 1; i++) {
        if (t_components[i] != -1) {
            printf("Component %d of CSP%d is corrupted.\n", t_components[i], csp);
        }
    }



int report[v] = {0};
    int suspect_cp[v] = {0};
    int S[v][v];

    for (int row_s = 0; row_s < v; row_s++) {
        for (int col_s = 0; col_s < v; col_s++) {
            S[row_s][col_s] = 0;
        }
    }

    for (int i = 0; i < v; i++) {
        for (int j = 0; j < k + 1; j++) {
            for (int l = 1; l < k + 1; l++) {
                if (mpz_cmp(CP[D[i][j]], CP[D[i][(j + l) % (k + 1)]]) != 0) {
                    // printf("In %d's comparing, CP[%d] == CP[%d]\n", i, D[i][j], D[i][(j + l) % (k + 1)]);
                    printf("In CS%2d's comparing, there's no other CP(s) same with CP[%d]\n", i, D[i][j]);

                    for (int rrr = 0; rrr < v; rrr++) {
                        S[F[D[i][j]][rrr]][rrr]++;
                    }

                    suspect_cp[D[i][j]]++;
                    for (int p = 0; p < k + 1; p++) {
                        // printf("%d ", D[D[i][j]][p]);
                        report[D[D[i][j]][p]]++;
                    }
                    // printf("\n");
                }
            }
        }
    }

    for (int iii = 0; iii < v; iii++) {
        printf("S[%2d]:{", iii);
        for (int jjj = 0; jjj < v; jjj++) {
            printf("%2d,", S[iii][jjj]);
        }
        printf("\b}\n");
    }

    puts("suspect cp");
    for (int i = 0; i < v; i++) {
        printf("%d ", suspect_cp[i]);
    }
    puts("after S");
    for (int row_s = 0; row_s < v; row_s++) {
        for (int col_s = 0; col_s < v; col_s++) {
            if (S[row_s][col_s] != 0) {
                printf("S[%d][%d] is %d\n", row_s, col_s, S[row_s][col_s]);
                for (int row_f = 0; row_f < v; row_f++) {
                    if (suspect_cp[row_f] == 0 && F[row_f][col_s] == row_s) {
                        S[row_s][col_s] = 0;
                        printf("F[%d][%d] is %d\n", row_f, col_s, F[row_f][col_s]);
                        printf("S[%d][%d] set to 0", row_s, col_s);
                    }
                }
            }
        }
    }
    printf("\n");
    for (int iii = 0; iii < v; iii++) {
        printf("S[%2d]:{", iii);
        for (int jjj = 0; jjj < v; jjj++) {
            printf("%2d,", S[iii][jjj]);
        }
        printf("\b}\n");
    }

    int csp = find_max(report, k * k + k + 1);
    // printf("CSP%d is the candidate.\n", csp);
    int t_components[k + 1];
    memcpy(t_components, E[csp], (k + 1) * sizeof(int));
    for (int i = 0; i < v; i++) {
        for (int j = 0; j < v; j++) {
            if (F[i][j] == csp && suspect_cp[i] == 0) {
                remove_ele(j, t_components, k + 1);
            }
        }
    }
    for (int i = 0; i < k + 1; i++) {
        if (t_components[i] != -1) {
            printf("Component %d of CSP%d is corrupted.\n", t_components[i], csp);
        }
    }